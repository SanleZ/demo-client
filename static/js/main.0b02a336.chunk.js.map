{"version":3,"sources":["shared/components/FullscreenProgress/FullscreenProgress.tsx","api/auth/api.ts","api/github/utils.ts","api/github/index.ts","features/auth/slice.ts","shared/redux/actions/resetState.ts","shared/redux/middleware/unauthenticatedMiddleware.ts","api/main/api.ts","shared/redux/store.ts","features/mainDashboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FullscreenProgress","position","width","height","justifyContent","alignItems","display","AUTH_API_REDUCER_KEY","authApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAccessToken","query","code","url","method","body","wrapResponseWithLink","data","link","links","parseLinkHeader","response","githubAxiosInstance","axios","create","baseURL","headers","accept","GITHUB_API_REDUCER_KEY","githubApi","requestOpts","a","getState","token","authSlice","accessToken","Authorization","result","err","error","status","refetchOnMountOrArgChange","createSlice","name","initialState","reducers","updateAccessToken","state","action","payload","authReducer","persistReducer","key","storage","whitelist","reducer","RESET_STATE_ACTION_TYPE","resetStateAction","createAction","unauthenticatedMiddleware","dispatch","next","isRejectedWithValue","MAIN_API_REDUCER_KEY","mainAPI","getQueryList","combinedReducer","combineReducers","store","configureStore","type","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","MainDashboard","useSelector","queryList","useGetQueryListQuery","JSON","stringify","App","loading","ReactRouterRoute","Route","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0b02a336.chunk.js","sourcesContent":["import { CircularProgress, Box } from '@material-ui/core';\nimport React from 'react';\n\nconst FullscreenProgress = () => {\n  return (\n    <Box position=\"absolute\" width=\"100%\" height=\"100vh\" justifyContent=\"center\" alignItems=\"center\" display=\"flex\">\n      <CircularProgress />\n    </Box>\n  );\n}\n\nexport default FullscreenProgress;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { AuthResponse } from './types';\n\nexport const AUTH_API_REDUCER_KEY = 'authApi';\nexport const authApi = createApi({\n  reducerPath: AUTH_API_REDUCER_KEY,\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://tp-auth.herokuapp.com',\n  }),\n  endpoints: (builder) => ({\n    getAccessToken: builder.query<AuthResponse, string>({\n      query: (code) => {\n        return ({\n          url: 'github/access_token',\n          method: 'POST',\n          body: { code }\n        })\n      },\n    }),\n  }),\n});\n","import parseLinkHeader from 'parse-link-header';\nimport { ResponseWithLink } from './types';\n\nexport const wrapResponseWithLink = <T>(data: T, link: string = ''): ResponseWithLink<T> => {\n  const links = parseLinkHeader(link);\n\n  return {\n    response: data,\n    ...links\n  }\n}\n","import { RequestOptions } from '@octokit/types/dist-types/RequestOptions';\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react';\nimport axios, { AxiosError } from 'axios';\nimport { omit } from 'lodash';\nimport { RootState } from '../../shared/redux/store';\nimport { wrapResponseWithLink } from './utils';\n\nconst githubAxiosInstance = axios.create({\n  baseURL: 'https://aapi.github.com',\n  headers: {\n    accept: `application/vnd.github.v3+json`\n  }\n})\n\nconst axiosBaseQuery = (): BaseQueryFn<RequestOptions> => async (requestOpts, { getState }) => {\n  try {\n    const token = (getState() as RootState).authSlice.accessToken;\n    const result = await githubAxiosInstance({\n      ...requestOpts,\n      headers: {\n        ...(omit(requestOpts.headers, ['user-agent'])),\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    return { data: wrapResponseWithLink(result.data, result.headers.link) };\n  } catch (axiosError) {\n    const err = axiosError as AxiosError;\n    return { error: { status: err.response?.status, data: err.response?.data } };\n  }\n};\n\nexport const GITHUB_API_REDUCER_KEY = 'githubApi';\nexport const githubApi = createApi({\n  reducerPath: GITHUB_API_REDUCER_KEY,\n  baseQuery: axiosBaseQuery(),\n  endpoints: () => ({}),\n  refetchOnMountOrArgChange: 60\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { AuthState } from './types';\n\nconst initialState: AuthState = {};\n\nexport const authSlice = createSlice({\n  name: 'authSlice',\n  initialState,\n  reducers: {\n    updateAccessToken(state, action: PayloadAction<string | undefined>) {\n      state.accessToken = action.payload;\n    },\n  },\n});\n\nexport const authReducer =  persistReducer({\n  key: 'rtk:auth',\n  storage,\n  whitelist: ['accessToken']\n}, authSlice.reducer);\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const RESET_STATE_ACTION_TYPE = 'resetState';\nexport const resetStateAction = createAction(RESET_STATE_ACTION_TYPE, () => {\n  return { payload: null };\n});\n","import { isRejectedWithValue, Middleware } from '@reduxjs/toolkit';\nimport { resetStateAction } from '../actions/resetState';\n\nexport const unauthenticatedMiddleware: Middleware = ({ dispatch }) => (next) => (action) => {\n  if (isRejectedWithValue(action) && action.payload.status === 401) {\n    dispatch(resetStateAction());\n  }\n\n  return next(action);\n};\n","import { GetQueryListResponse } from \"./types\";\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const MAIN_API_REDUCER_KEY = \"main\"\n\nexport const mainAPI = createApi({\n    reducerPath: MAIN_API_REDUCER_KEY,\n    baseQuery: fetchBaseQuery({ baseUrl: \"/\" }),\n    endpoints: (builder) => ({\n        getQueryList: builder.query<GetQueryListResponse, null>({\n            query: () => {\n                return ({\n                    url: 'query',\n                    method: 'GET',\n                })\n            }\n        })\n    })\n})","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { Reducer } from 'redux';\nimport { FLUSH, PAUSE, PERSIST, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport { AUTH_API_REDUCER_KEY, authApi } from '../../api/auth/api';\nimport { GITHUB_API_REDUCER_KEY, githubApi } from '../../api/github';\nimport { authReducer, authSlice } from '../../features/auth/slice';\nimport { RESET_STATE_ACTION_TYPE } from './actions/resetState';\nimport { unauthenticatedMiddleware } from './middleware/unauthenticatedMiddleware';\nimport { MAIN_API_REDUCER_KEY, mainAPI } from '../../api/main/api';\n\nconst reducers = {\n  [authSlice.name]: authReducer,\n  [AUTH_API_REDUCER_KEY]: authApi.reducer,\n  [GITHUB_API_REDUCER_KEY]: githubApi.reducer,\n  [MAIN_API_REDUCER_KEY]: mainAPI.reducer\n};\n\nconst combinedReducer = combineReducers<typeof reducers>(reducers);\n\nexport const rootReducer: Reducer<RootState> = (state, action) => {\n  if (action.type === RESET_STATE_ACTION_TYPE) {\n    state = {} as RootState;\n  }\n\n  return combinedReducer(state, action);\n}\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }).concat([\n    unauthenticatedMiddleware,\n    authApi.middleware,\n    githubApi.middleware,\n    mainAPI.middleware\n  ]),\n});\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof combinedReducer>;\nexport const useTypedDispatch = () => useDispatch<AppDispatch>();\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport { mainAPI } from \"../../api/main/api\";\n\n\nconst MainDashboard = () => {\n    const { data: queryList } = mainAPI.useGetQueryListQuery(null)\n\n    return <pre>{queryList ? JSON.stringify(queryList) : null}</pre>\n}\n\nexport default MainDashboard;","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\nimport Auth from './features/auth/Auth';\nimport UserMiddleware from './features/auth/components/UserMiddleware/UserMiddleware';\nimport Dashboard from './features/dashboard/Dashboard';\nimport FullscreenProgress from './shared/components/FullscreenProgress/FullscreenProgress';\nimport { persistor, store } from './shared/redux/store';\nimport MainDashboard from './features/mainDashboard';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<FullscreenProgress />} persistor={persistor}>\n        <Router>\n          <QueryParamProvider ReactRouterRoute={Route}>\n            <CssBaseline />\n            <MainDashboard />\n          </QueryParamProvider>\n        </Router>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}