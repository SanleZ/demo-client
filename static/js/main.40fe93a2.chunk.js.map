{"version":3,"sources":["features/MainDashboard/Messenger.module.scss","features/MainDashboard/MainDashboard.module.scss","features/MainDashboard/RightSodeDashboard/RightSideDashboard.module.scss","features/MainDashboard/LeftSideDashboard/LeftSideDashboard.module.scss","shared/components/FullscreenProgress/FullscreenProgress.tsx","api/auth/api.ts","api/github/utils.ts","api/github/index.ts","features/auth/slice.ts","shared/redux/actions/resetState.ts","shared/redux/middleware/unauthenticatedMiddleware.ts","api/main/api.ts","shared/redux/store.ts","assets/icons/robots.svg","shared/components/Chat/Message.tsx","features/MainDashboard/Messenger.tsx","assets/icons/chat.svg","features/MainDashboard/LeftSideDashboard/index.tsx","features/MainDashboard/RightSodeDashboard/index.tsx","features/MainDashboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FullscreenProgress","position","width","height","justifyContent","alignItems","display","AUTH_API_REDUCER_KEY","authApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAccessToken","query","code","url","method","body","wrapResponseWithLink","data","link","links","parseLinkHeader","response","githubAxiosInstance","axios","create","baseURL","headers","accept","GITHUB_API_REDUCER_KEY","githubApi","requestOpts","a","getState","token","authSlice","accessToken","Authorization","result","err","error","status","refetchOnMountOrArgChange","createSlice","name","initialState","reducers","updateAccessToken","state","action","payload","authReducer","persistReducer","key","storage","whitelist","reducer","RESET_STATE_ACTION_TYPE","resetStateAction","createAction","unauthenticatedMiddleware","dispatch","next","isRejectedWithValue","MAIN_API_REDUCER_KEY","mainAPI","getQueryList","sendQuery","combinedReducer","combineReducers","store","configureStore","type","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","useSelector","Message","messageBody","ai","role","container","wrap","style","marginBottom","item","marginTop","src","logo","border","charAt","xs","paddingTop","paddingLeft","noWrap","fontWeight","whiteSpace","fontFamily","margin","content","trim","Messenger","lastMessageRef","useRef","useState","message","setMessage","useLazyGetQueryListQuery","queryList","useLazySendQueryQuery","isFetching","isSuccess","useEffect","current","scrollIntoView","handleChangeMessage","useCallback","e","target","value","handleSendQuery","handlePressEnter","flex","className","s","messengerContainer","direction","justify","backgroundColor","top","zIndex","padding","borderBottom","fontSize","overflowY","messages","map","q","idx","ref","bottom","borderTop","left","fullWidth","placeholder","onChange","onKeyPress","variant","color","disabled","onClick","chatList","ChatNameItem","selected","chatName","ChatIcon","icon","LeftSideDashboard","selectedChat","setSelectedChat","handleSelectChat","dashboardContainer","controlPanel","search","chatNameList","c","settings","settingsIcon","iconName","RightSideDashboard","MainDashboard","mainDashboardContainer","theme","createMuiTheme","palette","primary","main","blue","secondary","App","loading","ReactRouterRoute","Route","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.40fe93a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messengerContainer\":\"Messenger_messengerContainer__gUXgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainDashboardContainer\":\"MainDashboard_mainDashboardContainer__3nwhr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboardContainer\":\"RightSideDashboard_dashboardContainer__25Rud\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboardContainer\":\"LeftSideDashboard_dashboardContainer__1BpQ2\",\"controlPanel\":\"LeftSideDashboard_controlPanel__2O68f\",\"search\":\"LeftSideDashboard_search__6Dyhs\",\"chatNameList\":\"LeftSideDashboard_chatNameList__2UEIE\",\"chatName\":\"LeftSideDashboard_chatName__1TdEt\",\"icon\":\"LeftSideDashboard_icon__3xl8N\",\"name\":\"LeftSideDashboard_name__1Ra1w\",\"settings\":\"LeftSideDashboard_settings__2h_Kl\",\"settingsIcon\":\"LeftSideDashboard_settingsIcon___yR3g\",\"iconName\":\"LeftSideDashboard_iconName__1_kz1\"};","import { CircularProgress, Box } from '@material-ui/core';\nimport React from 'react';\n\nconst FullscreenProgress = () => {\n  return (\n    <Box position=\"absolute\" width=\"100%\" height=\"100vh\" justifyContent=\"center\" alignItems=\"center\" display=\"flex\">\n      <CircularProgress />\n    </Box>\n  );\n}\n\nexport default FullscreenProgress;\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { AuthResponse } from \"./types\";\n\nexport const AUTH_API_REDUCER_KEY = \"authApi\";\nexport const authApi = createApi({\n  reducerPath: AUTH_API_REDUCER_KEY,\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://tp-auth.herokuapp.com\",\n  }),\n  endpoints: (builder) => ({\n    getAccessToken: builder.query<AuthResponse, string>({\n      query: (code) => {\n        return {\n          url: \"github/access_token\",\n          method: \"POST\",\n          body: { code },\n        };\n      },\n    }),\n  }),\n});\n","import parseLinkHeader from 'parse-link-header';\nimport { ResponseWithLink } from './types';\n\nexport const wrapResponseWithLink = <T>(data: T, link: string = ''): ResponseWithLink<T> => {\n  const links = parseLinkHeader(link);\n\n  return {\n    response: data,\n    ...links\n  }\n}\n","import { RequestOptions } from '@octokit/types/dist-types/RequestOptions';\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react';\nimport axios, { AxiosError } from 'axios';\nimport { omit } from 'lodash';\nimport { RootState } from '../../shared/redux/store';\nimport { wrapResponseWithLink } from './utils';\n\nconst githubAxiosInstance = axios.create({\n  baseURL: 'https://aapi.github.com',\n  headers: {\n    accept: `application/vnd.github.v3+json`\n  }\n})\n\nconst axiosBaseQuery = (): BaseQueryFn<RequestOptions> => async (requestOpts, { getState }) => {\n  try {\n    const token = (getState() as RootState).authSlice.accessToken;\n    const result = await githubAxiosInstance({\n      ...requestOpts,\n      headers: {\n        ...(omit(requestOpts.headers, ['user-agent'])),\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    return { data: wrapResponseWithLink(result.data, result.headers.link) };\n  } catch (axiosError) {\n    const err = axiosError as AxiosError;\n    return { error: { status: err.response?.status, data: err.response?.data } };\n  }\n};\n\nexport const GITHUB_API_REDUCER_KEY = 'githubApi';\nexport const githubApi = createApi({\n  reducerPath: GITHUB_API_REDUCER_KEY,\n  baseQuery: axiosBaseQuery(),\n  endpoints: () => ({}),\n  refetchOnMountOrArgChange: 60\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { AuthState } from './types';\n\nconst initialState: AuthState = {};\n\nexport const authSlice = createSlice({\n  name: 'authSlice',\n  initialState,\n  reducers: {\n    updateAccessToken(state, action: PayloadAction<string | undefined>) {\n      state.accessToken = action.payload;\n    },\n  },\n});\n\nexport const authReducer =  persistReducer({\n  key: 'rtk:auth',\n  storage,\n  whitelist: ['accessToken']\n}, authSlice.reducer);\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const RESET_STATE_ACTION_TYPE = 'resetState';\nexport const resetStateAction = createAction(RESET_STATE_ACTION_TYPE, () => {\n  return { payload: null };\n});\n","import { isRejectedWithValue, Middleware } from '@reduxjs/toolkit';\nimport { resetStateAction } from '../actions/resetState';\n\nexport const unauthenticatedMiddleware: Middleware = ({ dispatch }) => (next) => (action) => {\n  if (isRejectedWithValue(action) && action.payload.status === 401) {\n    dispatch(resetStateAction());\n  }\n\n  return next(action);\n};\n","import {\n    GetQueryListResponse,\n    SendQueryArgs,\n    SendQueryResponse,\n} from \"./types\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const MAIN_API_REDUCER_KEY = \"main\";\n\nexport const mainAPI = createApi({\n    reducerPath: MAIN_API_REDUCER_KEY,\n    baseQuery: fetchBaseQuery({ baseUrl: \"/\" }),\n    endpoints: (builder) => ({\n        getQueryList: builder.query<GetQueryListResponse, null>({\n            query: () => {\n                return {\n                    url: \"query\",\n                    method: \"GET\",\n                };\n            },\n        }),\n        sendQuery: builder.query<SendQueryResponse, SendQueryArgs>({\n            query: (body) => {\n                return {\n                    url: \"query\",\n                    method: \"POST\",\n                    body,\n                };\n            },\n        }),\n    }),\n});\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { Reducer } from 'redux';\nimport { FLUSH, PAUSE, PERSIST, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport { AUTH_API_REDUCER_KEY, authApi } from '../../api/auth/api';\nimport { GITHUB_API_REDUCER_KEY, githubApi } from '../../api/github';\nimport { authReducer, authSlice } from '../../features/auth/slice';\nimport { RESET_STATE_ACTION_TYPE } from './actions/resetState';\nimport { unauthenticatedMiddleware } from './middleware/unauthenticatedMiddleware';\nimport { MAIN_API_REDUCER_KEY, mainAPI } from '../../api/main/api';\n\nconst reducers = {\n  [authSlice.name]: authReducer,\n  [AUTH_API_REDUCER_KEY]: authApi.reducer,\n  [GITHUB_API_REDUCER_KEY]: githubApi.reducer,\n  [MAIN_API_REDUCER_KEY]: mainAPI.reducer\n};\n\nconst combinedReducer = combineReducers<typeof reducers>(reducers);\n\nexport const rootReducer: Reducer<RootState> = (state, action) => {\n  if (action.type === RESET_STATE_ACTION_TYPE) {\n    state = {} as RootState;\n  }\n\n  return combinedReducer(state, action);\n}\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }).concat([\n    unauthenticatedMiddleware,\n    authApi.middleware,\n    githubApi.middleware,\n    mainAPI.middleware\n  ]),\n});\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof combinedReducer>;\nexport const useTypedDispatch = () => useDispatch<AppDispatch>();\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export default __webpack_public_path__ + \"static/media/robots.9f535814.svg\";","import { Avatar, Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { MessageBody } from \"../../../api/main/types\";\nimport logo from \"../../../assets/icons/robots.svg\";\n\ninterface IProps {\n    messageBody: MessageBody;\n    key: string | number;\n}\n\nconst Message: React.FC<IProps> = ({ messageBody, key }) => {\n    const ai = messageBody.role === \"myWorker\";\n\n    return (\n        <Grid container wrap=\"nowrap\" key={key} style={{ marginBottom: 12 }}>\n            <Grid item style={{ marginTop: \"auto\" }}>\n                <Avatar src={ai ? logo : \"\"} style={{ border: \"1px solid #CDD2D6\" }}>\n                    {messageBody.role ? messageBody.role.charAt(0) : \"U\"}\n                </Avatar>\n            </Grid>\n            <Grid item xs={10} style={{ paddingTop: 7, paddingLeft: 15 }}>\n                <Typography noWrap={false} style={{ fontWeight: ai ? 400 : 600 }}>\n                    <pre\n                        style={{\n                            whiteSpace: \"pre-wrap\",\n                            fontFamily: \"sans-serif\",\n                            margin: 0,\n                        }}\n                    >\n                        {messageBody.content.trim()}\n                    </pre>\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Message;\n","import {\n  Box,\n  Button,\n  Grid,\n  InputBase,\n  LinearProgress,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Message from \"../../shared/components/Chat/Message\";\nimport { mainAPI } from \"../../api/main/api\";\nimport s from \"./Messenger.module.scss\";\n\nconst Messenger: React.FC<any> = () => {\n  const lastMessageRef = useRef<HTMLDivElement>(null);\n  const [message, setMessage] = useState<string>(\"\");\n  const [getQueryList, { data: queryList }] =\n    mainAPI.useLazyGetQueryListQuery();\n  const [sendQuery, { isFetching, isSuccess }] =\n    mainAPI.useLazySendQueryQuery();\n\n  useEffect(() => {\n    getQueryList(null);\n  }, [getQueryList]);\n\n  useEffect(() => {\n    if (queryList && lastMessageRef.current) {\n      lastMessageRef.current.scrollIntoView();\n    }\n  }, [queryList]);\n\n  const handleChangeMessage = useCallback((e) => {\n    setMessage(e.target.value);\n  }, []);\n\n  const handleSendQuery = useCallback(() => {\n    if (message) {\n      sendQuery({ query: message });\n    }\n  }, [message, sendQuery]);\n\n  const handlePressEnter = useCallback(\n    (e) => {\n      if (e.code === \"Enter\" && e.target.value) {\n        sendQuery({ query: e.target.value });\n      }\n    },\n    [sendQuery]\n  );\n\n  useEffect(() => {\n    if (!isFetching && isSuccess) {\n      setMessage(\"\");\n      getQueryList(null);\n    }\n  }, [getQueryList, isFetching, isSuccess]);\n\n  return (\n    <Box\n      flex=\"1 1 auto\"\n      height=\"100%\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      display=\"flex\"\n      className={s.messengerContainer}\n    >\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"flex-start\"\n        xs={12}\n        style={{ position: \"relative\", height: \"100vh\" }}\n      >\n        <Grid\n          item\n          xs={12}\n          style={{\n            height: \"82px\",\n            position: \"absolute\",\n            backgroundColor: \"white\",\n            width: \"100%\",\n            top: \"0\",\n            zIndex: 2,\n            padding: 10,\n            paddingTop: 15,\n            paddingLeft: 30,\n            borderBottom: \"1px solid #CDD2D6\",\n          }}\n        >\n          <Typography style={{ fontSize: 33 }}>New Chat</Typography>\n        </Grid>\n        <div style={{ padding: \"100px 20px 80px\", overflowY: \"auto\" }}>\n          {queryList\n            ? queryList.messages.map((q, idx) => (\n                <Message key={`q-${idx}`} messageBody={q} />\n              ))\n            : null}\n          <div ref={lastMessageRef} />\n        </div>\n        <Grid\n          item\n          xs={12}\n          style={{\n            position: \"absolute\",\n            backgroundColor: \"white\",\n            width: \"100%\",\n            bottom: \"0\",\n            zIndex: 2,\n            padding: 10,\n            height: 70,\n            paddingLeft: 50,\n            borderTop: \"1px solid #CDD2D6\",\n          }}\n        >\n          <Grid container xs={12} style={{ height: \"100%\" }}>\n            <Grid\n              item\n              xs={12}\n              style={{\n                position: \"absolute\",\n                top: 0,\n                zIndex: 3,\n                left: 0,\n                height: 10,\n                width: \"100%\",\n              }}\n            >\n              {isFetching && <LinearProgress />}\n            </Grid>\n            <Grid item xs={10} style={{ display: \"flex\" }}>\n              <InputBase\n                fullWidth\n                placeholder=\"Start type here\"\n                onChange={handleChangeMessage}\n                value={message}\n                onKeyPress={handlePressEnter}\n              />\n            </Grid>\n            <Grid item xs={2} style={{ display: \"flex\" }}>\n              <Button\n                variant=\"text\"\n                style={{ color: \"#3597DE\" }}\n                disabled={isFetching}\n                onClick={handleSendQuery}\n              >\n                Send\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Messenger;\n","export default __webpack_public_path__ + \"static/media/chat.41904cd3.svg\";","import React, { useCallback, useState } from \"react\";\nimport s from \"./LeftSideDashboard.module.scss\";\nimport { Avatar, Button, IconButton } from \"@material-ui/core\";\nimport { SearchSharp, Settings } from \"@material-ui/icons\";\nimport ChatIcon from \"../../../assets/icons/chat.svg\";\n\nconst chatList = [\"New Chat\", \"Paywall for fintech mobile app, that offers\"];\n\ninterface IProps {\n  name: string;\n  onClick: any;\n  selected: boolean;\n}\n\nconst ChatNameItem: React.FC<IProps> = ({ name, onClick, selected }) => {\n  return (\n    <div\n      className={s.chatName}\n      onClick={onClick}\n      style={{ backgroundColor: selected ? \"#CFE6F7\" : \"white\" }}\n    >\n      <Avatar src={ChatIcon} className={s.icon} />\n      <div className={s.name}>{name}</div>\n    </div>\n  );\n};\n\nconst LeftSideDashboard = () => {\n  const [selectedChat, setSelectedChat] = useState(\"New Chat\");\n\n  const handleSelectChat = useCallback((name) => {\n    setSelectedChat(name);\n  }, []);\n\n  return (\n    <div className={s.dashboardContainer}>\n      <div className={s.controlPanel}>\n        <Button variant=\"contained\" color=\"primary\">\n          + New Chat\n        </Button>\n        <IconButton className={s.search}>\n          <SearchSharp />\n        </IconButton>\n      </div>\n      <div className={s.chatNameList}>\n        {chatList.map((c) => (\n          <ChatNameItem\n            key={c}\n            name={c}\n            onClick={() => handleSelectChat(c)}\n            selected={selectedChat === c}\n          />\n        ))}\n      </div>\n      <div className={s.settings}>\n        <IconButton className={s.settingsIcon}>\n          <Settings />\n          <div className={s.iconName}>Settings</div>\n        </IconButton>\n      </div>\n    </div>\n  );\n};\n\nexport default LeftSideDashboard;\n","import React from \"react\";\nimport s from \"./RightSideDashboard.module.scss\";\n\nconst RightSideDashboard = () => {\n  return <div className={s.dashboardContainer}></div>;\n};\n\nexport default RightSideDashboard;\n","import React from \"react\";\nimport Messenger from \"./Messenger\";\nimport LeftSideDashboard from \"./LeftSideDashboard\";\nimport s from \"./MainDashboard.module.scss\";\nimport RightSideDashboard from \"./RightSodeDashboard\";\n\nconst MainDashboard = () => {\n  return (\n    <div className={s.mainDashboardContainer}>\n      <LeftSideDashboard />\n      <Messenger />\n      <RightSideDashboard />\n    </div>\n  );\n};\nexport default MainDashboard;\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport \"./index.css\";\nimport Auth from \"./features/auth/Auth\";\nimport UserMiddleware from \"./features/auth/components/UserMiddleware/UserMiddleware\";\nimport Dashboard from \"./features/dashboard/Dashboard\";\nimport FullscreenProgress from \"./shared/components/FullscreenProgress/FullscreenProgress\";\nimport { persistor, store } from \"./shared/redux/store\";\nimport MainDashboard from \"./features/MainDashboard\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500],\n    },\n    secondary: {\n      main: \"#f44336\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <PersistGate loading={<FullscreenProgress />} persistor={persistor}>\n          <Router>\n            <QueryParamProvider ReactRouterRoute={Route}>\n              <CssBaseline />\n              <MainDashboard />\n            </QueryParamProvider>\n          </Router>\n        </PersistGate>\n      </MuiThemeProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}