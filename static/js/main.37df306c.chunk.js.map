{"version":3,"sources":["shared/components/FullscreenProgress/FullscreenProgress.tsx","api/auth/api.ts","api/github/utils.ts","api/github/index.ts","features/auth/slice.ts","shared/redux/actions/resetState.ts","shared/redux/middleware/unauthenticatedMiddleware.ts","api/main/api.ts","shared/redux/store.ts","assets/icons/robots.svg","shared/components/Chat/Message.tsx","features/mainDashboard/Messenger.tsx","features/mainDashboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FullscreenProgress","position","width","height","justifyContent","alignItems","display","AUTH_API_REDUCER_KEY","authApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getAccessToken","query","code","url","method","body","wrapResponseWithLink","data","link","links","parseLinkHeader","response","githubAxiosInstance","axios","create","baseURL","headers","accept","GITHUB_API_REDUCER_KEY","githubApi","requestOpts","a","getState","token","authSlice","accessToken","Authorization","result","err","error","status","refetchOnMountOrArgChange","createSlice","name","initialState","reducers","updateAccessToken","state","action","payload","authReducer","persistReducer","key","storage","whitelist","reducer","RESET_STATE_ACTION_TYPE","resetStateAction","createAction","unauthenticatedMiddleware","dispatch","next","isRejectedWithValue","MAIN_API_REDUCER_KEY","mainAPI","getQueryList","sendQuery","combinedReducer","combineReducers","store","configureStore","type","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","useSelector","Message","messageBody","ai","role","container","wrap","spacing","style","margin","item","marginTop","src","logo","border","charAt","xs","paddingTop","noWrap","fontWeight","whiteSpace","fontFamily","content","trim","Messenger","messagesRef","useRef","useState","message","setMessage","useLazyGetQueryListQuery","queryList","useLazySendQueryQuery","isFetching","isSuccess","useEffect","current","scrollIntoView","handleChangeMessage","useCallback","e","target","value","handleSendQuery","handlePressEnter","maxWidth","backgroundColor","direction","justify","top","zIndex","padding","paddingLeft","borderBottom","fontSize","ref","overflowY","messages","map","q","idx","bottom","borderTop","left","fullWidth","placeholder","onChange","onKeyPress","variant","color","disabled","onClick","MainDashboard","App","loading","ReactRouterRoute","Route","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.37df306c.chunk.js","sourcesContent":["import { CircularProgress, Box } from '@material-ui/core';\nimport React from 'react';\n\nconst FullscreenProgress = () => {\n  return (\n    <Box position=\"absolute\" width=\"100%\" height=\"100vh\" justifyContent=\"center\" alignItems=\"center\" display=\"flex\">\n      <CircularProgress />\n    </Box>\n  );\n}\n\nexport default FullscreenProgress;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { AuthResponse } from './types';\n\nexport const AUTH_API_REDUCER_KEY = 'authApi';\nexport const authApi = createApi({\n  reducerPath: AUTH_API_REDUCER_KEY,\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://tp-auth.herokuapp.com',\n  }),\n  endpoints: (builder) => ({\n    getAccessToken: builder.query<AuthResponse, string>({\n      query: (code) => {\n        return ({\n          url: 'github/access_token',\n          method: 'POST',\n          body: { code }\n        })\n      },\n    }),\n  }),\n});\n","import parseLinkHeader from 'parse-link-header';\nimport { ResponseWithLink } from './types';\n\nexport const wrapResponseWithLink = <T>(data: T, link: string = ''): ResponseWithLink<T> => {\n  const links = parseLinkHeader(link);\n\n  return {\n    response: data,\n    ...links\n  }\n}\n","import { RequestOptions } from '@octokit/types/dist-types/RequestOptions';\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react';\nimport axios, { AxiosError } from 'axios';\nimport { omit } from 'lodash';\nimport { RootState } from '../../shared/redux/store';\nimport { wrapResponseWithLink } from './utils';\n\nconst githubAxiosInstance = axios.create({\n  baseURL: 'https://aapi.github.com',\n  headers: {\n    accept: `application/vnd.github.v3+json`\n  }\n})\n\nconst axiosBaseQuery = (): BaseQueryFn<RequestOptions> => async (requestOpts, { getState }) => {\n  try {\n    const token = (getState() as RootState).authSlice.accessToken;\n    const result = await githubAxiosInstance({\n      ...requestOpts,\n      headers: {\n        ...(omit(requestOpts.headers, ['user-agent'])),\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    return { data: wrapResponseWithLink(result.data, result.headers.link) };\n  } catch (axiosError) {\n    const err = axiosError as AxiosError;\n    return { error: { status: err.response?.status, data: err.response?.data } };\n  }\n};\n\nexport const GITHUB_API_REDUCER_KEY = 'githubApi';\nexport const githubApi = createApi({\n  reducerPath: GITHUB_API_REDUCER_KEY,\n  baseQuery: axiosBaseQuery(),\n  endpoints: () => ({}),\n  refetchOnMountOrArgChange: 60\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { AuthState } from './types';\n\nconst initialState: AuthState = {};\n\nexport const authSlice = createSlice({\n  name: 'authSlice',\n  initialState,\n  reducers: {\n    updateAccessToken(state, action: PayloadAction<string | undefined>) {\n      state.accessToken = action.payload;\n    },\n  },\n});\n\nexport const authReducer =  persistReducer({\n  key: 'rtk:auth',\n  storage,\n  whitelist: ['accessToken']\n}, authSlice.reducer);\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const RESET_STATE_ACTION_TYPE = 'resetState';\nexport const resetStateAction = createAction(RESET_STATE_ACTION_TYPE, () => {\n  return { payload: null };\n});\n","import { isRejectedWithValue, Middleware } from '@reduxjs/toolkit';\nimport { resetStateAction } from '../actions/resetState';\n\nexport const unauthenticatedMiddleware: Middleware = ({ dispatch }) => (next) => (action) => {\n  if (isRejectedWithValue(action) && action.payload.status === 401) {\n    dispatch(resetStateAction());\n  }\n\n  return next(action);\n};\n","import { GetQueryListResponse, SendQueryArgs, SendQueryResponse } from \"./types\";\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const MAIN_API_REDUCER_KEY = \"main\"\n\nexport const mainAPI = createApi({\n    reducerPath: MAIN_API_REDUCER_KEY,\n    baseQuery: fetchBaseQuery({ baseUrl: \"/\" }),\n    endpoints: (builder) => ({\n        getQueryList: builder.query<GetQueryListResponse, null>({\n            query: () => {\n                return ({\n                    url: 'query',\n                    method: 'GET',\n                })\n            }\n        }),\n        sendQuery: builder.query<SendQueryResponse, SendQueryArgs>({\n            query: (body) => {\n                return ({\n                    url: 'query',\n                    method: 'POST',\n                    body\n                })\n            }\n        })\n    })\n})","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { Reducer } from 'redux';\nimport { FLUSH, PAUSE, PERSIST, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport { AUTH_API_REDUCER_KEY, authApi } from '../../api/auth/api';\nimport { GITHUB_API_REDUCER_KEY, githubApi } from '../../api/github';\nimport { authReducer, authSlice } from '../../features/auth/slice';\nimport { RESET_STATE_ACTION_TYPE } from './actions/resetState';\nimport { unauthenticatedMiddleware } from './middleware/unauthenticatedMiddleware';\nimport { MAIN_API_REDUCER_KEY, mainAPI } from '../../api/main/api';\n\nconst reducers = {\n  [authSlice.name]: authReducer,\n  [AUTH_API_REDUCER_KEY]: authApi.reducer,\n  [GITHUB_API_REDUCER_KEY]: githubApi.reducer,\n  [MAIN_API_REDUCER_KEY]: mainAPI.reducer\n};\n\nconst combinedReducer = combineReducers<typeof reducers>(reducers);\n\nexport const rootReducer: Reducer<RootState> = (state, action) => {\n  if (action.type === RESET_STATE_ACTION_TYPE) {\n    state = {} as RootState;\n  }\n\n  return combinedReducer(state, action);\n}\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }).concat([\n    unauthenticatedMiddleware,\n    authApi.middleware,\n    githubApi.middleware,\n    mainAPI.middleware\n  ]),\n});\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof combinedReducer>;\nexport const useTypedDispatch = () => useDispatch<AppDispatch>();\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export default __webpack_public_path__ + \"static/media/robots.9f535814.svg\";","import { Avatar, Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { MessageBody } from \"../../../api/main/types\";\nimport logo from \"../../../assets/icons/robots.svg\";\n\ninterface IProps {\n    messageBody: MessageBody,\n    key: string | number\n}\n\nconst Message: React.FC<IProps> = ({ messageBody, key }) => {\n    const ai = messageBody.role === \"myWorker\";\n\n    return <Grid container wrap=\"nowrap\" spacing={2} key={key} style={{ margin: 10 }}>\n        <Grid item style={{ marginTop: \"auto\" }}>\n            <Avatar src={ai ? logo : \"\"} style={{ border: \"1px solid #CDD2D6\" }}>\n                {messageBody.role ? messageBody.role.charAt(0) : \"U\"}</Avatar>\n        </Grid>\n        <Grid item xs={10} style={{ paddingTop: 15 }}>\n            <Typography noWrap={false} style={{ fontWeight: ai ? 400 : 600 }}><pre style={{ whiteSpace: \"pre-wrap\", fontFamily: \"sans-serif\", margin: 0 }}>{messageBody.content.trim()}</pre></Typography>\n        </Grid>\n    </Grid>\n}\n\nexport default Message","import { Box, Button, Grid, InputBase, LinearProgress, Typography } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Message from \"../../shared/components/Chat/Message\";\nimport { mainAPI } from \"../../api/main/api\";\n\nconst Messenger: React.FC<any> = () => {\n\n    const messagesRef = useRef<HTMLDivElement>(null)\n    const [message, setMessage] = useState<string>(\"\")\n    const [getQueryList, { data: queryList }] = mainAPI.useLazyGetQueryListQuery()\n    const [sendQuery, { isFetching, isSuccess }] = mainAPI.useLazySendQueryQuery()\n\n\n    useEffect(() => { getQueryList(null) }, [getQueryList])\n\n    useEffect(() => {\n        if (queryList && messagesRef.current) {\n            messagesRef.current.scrollIntoView()\n        }\n    }, [queryList])\n    const handleChangeMessage = useCallback((e) => {\n        setMessage(e.target.value)\n    }, [])\n\n    const handleSendQuery = useCallback(() => {\n        if (message) {\n            sendQuery({ query: message })\n        }\n    }, [message, sendQuery])\n\n    const handlePressEnter = useCallback((e) => {\n        if (e.code === \"Enter\" && e.target.value) {\n            sendQuery({ query: e.target.value })\n        }\n    }, [sendQuery])\n\n    useEffect(() => {\n        if (!isFetching && isSuccess) {\n            setMessage(\"\")\n            getQueryList(null)\n        }\n    }, [getQueryList, isFetching, isSuccess])\n\n    return <Box maxWidth={\"60vw\"} height=\"100vh\" alignItems=\"center\" justifyContent=\"center\" display=\"flex\" style={{ margin: \"0 auto\", backgroundColor: \"white\" }}>\n        <Grid\n            container direction=\"column\" justify=\"center\"\n            alignItems=\"flex-start\"\n            xs={12}\n            style={{ position: \"relative\", height: \"100%\" }}\n        >\n            <Grid item xs={12} style={{ position: \"absolute\", backgroundColor: \"white\", width: \"100%\", top: \"0\", zIndex: 2, padding: 10, paddingLeft: 30, borderBottom: \"1px solid #CDD2D6\" }}>\n                <Typography style={{ fontSize: 33 }}>New Chat</Typography>\n            </Grid>\n            <div ref={messagesRef} style={{ padding: \"100px 0\", overflowY: \"auto\" }}>\n                {queryList ? queryList.messages.map((q, idx) => <Message key={`q-${idx}`} messageBody={q} />) : null}\n            </div>\n            <Grid item xs={12} style={{ position: \"absolute\", backgroundColor: \"white\", width: \"100%\", bottom: \"0\", zIndex: 2, padding: 10, height: 70, paddingLeft: 50, borderTop: \"1px solid #CDD2D6\" }}>\n                <Grid container xs={12}>\n                    <Grid item xs={12} style={{ position: \"absolute\", top: 0, zIndex: 3, left: 0, height: 10, width: \"100%\" }}>{isFetching && <LinearProgress />}</Grid>\n                    <Grid item xs={10}>\n                        <InputBase fullWidth placeholder=\"Start type here\" onChange={handleChangeMessage} value={message} onKeyPress={handlePressEnter} />\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Button variant=\"text\" style={{ color: \"#3597DE\" }} disabled={isFetching} onClick={handleSendQuery}>Send</Button>\n                    </Grid>\n\n                </Grid>\n            </Grid>\n        </Grid>\n\n    </Box>\n}\n\nexport default Messenger","import React from \"react\";\nimport Messenger from \"./Messenger\";\nimport { Grid } from \"@material-ui/core\";\n\n\nconst MainDashboard = () => {\n    return <Grid container direction=\"row\" justify=\"center\"\n        alignItems=\"center\"><Grid xs={12} ><Messenger /></Grid></Grid>\n}\nexport default MainDashboard;","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\nimport Auth from './features/auth/Auth';\nimport UserMiddleware from './features/auth/components/UserMiddleware/UserMiddleware';\nimport Dashboard from './features/dashboard/Dashboard';\nimport FullscreenProgress from './shared/components/FullscreenProgress/FullscreenProgress';\nimport { persistor, store } from './shared/redux/store';\nimport MainDashboard from './features/mainDashboard';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<FullscreenProgress />} persistor={persistor}>\n        <Router>\n          <QueryParamProvider ReactRouterRoute={Route}>\n            <CssBaseline />\n            <MainDashboard/>\n          </QueryParamProvider>\n        </Router>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}